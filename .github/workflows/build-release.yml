name: Build and release

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goarch: [amd64, arm64] # Build for amd64 and arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: Build binary
        run: |
          GOOS=linux GOARCH=${{ matrix.goarch }} go build -o dotfiles-installer-linux-${{ matrix.goarch }}

      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dotfiles-installer-linux-${{ matrix.goarch }}
          asset_name: dotfiles-installer-linux-${{ matrix.goarch }}
          asset_content_type: application/octet-stream

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create install.sh
        run: |
          cat <<EOF > install.sh
          #!/bin/bash

          ARCH=\$(uname -m)

          case "\$ARCH" in
            x86_64) BINARY="dotfiles-installer-linux-amd64";;
            arm64) BINARY="dotfiles-installer-linux-arm64";;
            *) echo "Unsupported architecture"; exit 1;;
          esac

          curl -L "\${{ github.event.release.upload_url }}/../download/\$BINARY" -o dotfiles-installer
          chmod +x dotfiles-installer
          ./dotfiles-installer
          EOF
          chmod +x install.sh

      - name: Upload install.sh to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./install.sh
          asset_name: install.sh
          asset_content_type: application/x-sh
