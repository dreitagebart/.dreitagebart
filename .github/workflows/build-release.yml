name: Build and release

on:
  push:
    tags:
      - 'v*' # trigger on tags beginning with v like v1.0

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        goarch: [amd64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Golang
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: Build binary
        run: |
          cd src && GOOS=${{ runner.os == 'Linux' && 'linux' }} GOARCH=${{ matrix.goarch }} go build -o dotfiles-installer-${GOOS}-${GOARCH}

      - name: Get release upload URL
        id: get_release_url
        run: |
          RELEASE_URL=$(gh release view ${{ github.ref_name }} --json uploadUrl -q .uploadUrl || gh release create ${{ github.ref_name }} --generate-notes --json uploadUrl -q .uploadUrl)
          echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_ENV

      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: ./src/dotfiles-installer-${{ runner.os == 'Linux' && 'linux' }}-${{ matrix.goarch }}
          asset_name: dotfiles-installer-${{ runner.os == 'Linux' && 'linux' }}-${{ matrix.goarch }}
          asset_content_type: application/octet-stream

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create install.sh
        run: |
          cat <<EOF > install.sh
          #!/bin/bash

          OS=\$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=\$(uname -m)

          case "\$OS" in
            linux)
              case "\$ARCH" in
                x86_64) BINARY="dotfiles-installer-linux-amd64";;
                *) echo "Unsupported architecture"; exit 1;;
              esac
              ;;
            *) echo "Unsupported operating system"; exit 1;;
          esac

          curl -L "\${{ env.RELEASE_URL }}/../download/\$BINARY" -o dotfiles-installer
          chmod +x dotfiles-installer
          ./dotfiles-installer
          EOF
          chmod +x install.sh

      - name: Upload install.sh to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: ./install.sh
          asset_name: install.sh
          asset_content_type: application/x-sh
